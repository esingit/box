<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.esin.box.mapper.FitnessRecordMapper">

    <resultMap id="fitnessRecordDTOMap" type="com.esin.box.dto.FitnessRecordDTO">
        <result property="id" column="id"/>
        <result property="typeId" column="type_id"/>
        <result property="count" column="count"/>
        <result property="unitId" column="unit_id"/>
        <result property="finishTime" column="finish_time"/>
        <result property="remark" column="remark"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="createUser" column="create_user"/>
        <result property="updateUser" column="update_user"/>
        <result property="version" column="version"/>
        <result property="deleted" column="deleted"/>
        <result property="typeName" column="type_name"/>
        <result property="typeValue" column="type_value"/>
        <result property="unitName" column="unit_name"/>
        <result property="unitValue" column="unit_value"/>
    </resultMap>

    <select id="selectPageWithMeta" resultMap="fitnessRecordDTOMap">
        SELECT
        fr.*,
        type_meta.type_name as type_name,
        type_meta.value1 as type_value,
        unit_meta.type_name as unit_name,
        unit_meta.value1 as unit_value
        FROM fitness_record fr
        LEFT JOIN common_meta type_meta ON fr.type_id = type_meta.id AND type_meta.deleted = 0
        LEFT JOIN common_meta unit_meta ON fr.unit_id = unit_meta.id AND unit_meta.deleted = 0
        <where>
            <if test="typeIdList != null and typeIdList.size > 0">
                AND fr.type_id IN
                <foreach collection="typeIdList" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
            <if test="remark != null and remark != ''">
                AND fr.remark LIKE CONCAT('%', #{remark}, '%')
            </if>
            <if test="startDate != null and startDate != ''">
                AND fr.finish_time >= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND fr.finish_time &lt;= #{endDate}
            </if>
            <if test="createUser != null and createUser != ''">
                AND fr.create_user = #{createUser}
            </if>
            AND fr.deleted = 0
        </where>
        ORDER BY fr.finish_time DESC, fr.create_time DESC
    </select>

    <select id="getMonthlyCount" resultType="int">
        SELECT COUNT(*)
        FROM fitness_record fr
                 LEFT JOIN common_meta cm ON fr.type_id = cm.id
        WHERE fr.create_user = #{createUser}
          AND fr.finish_time &gt;= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)
          AND cm.type_code = 'FITNESS_TYPE'
          AND cm.key2 = 'EXERCISE'
          AND fr.deleted = 0
          AND cm.deleted = 0
    </select>

    <select id="getTotalCount" resultType="int">
        SELECT COUNT(*)
        FROM fitness_record fr
                 LEFT JOIN common_meta cm ON fr.type_id = cm.id
        WHERE fr.create_user = #{createUser}
          AND cm.type_code = 'FITNESS_TYPE'
          AND cm.key2 = 'EXERCISE'
          AND fr.deleted = 0
          AND cm.deleted = 0
    </select>

    <select id="getWeeklyCount" resultType="int">
        SELECT COUNT(DISTINCT DATE(fr.finish_time))
        FROM fitness_record fr
                 LEFT JOIN common_meta cm ON fr.type_id = cm.id
        WHERE fr.create_user = #{createUser}
          AND YEARWEEK(fr.finish_time) = YEARWEEK(NOW())
          AND cm.type_code = 'FITNESS_TYPE'
          AND cm.key2 = 'EXERCISE'
          AND fr.deleted = 0
          AND cm.deleted = 0
    </select>

    <select id="getCarbsIntake" resultType="int">
        SELECT COALESCE(SUM(fr.count), 0)
        FROM fitness_record fr
                 LEFT JOIN common_meta cm ON fr.type_id = cm.id
        WHERE fr.create_user = #{createUser}
          AND DATE(fr.finish_time) = CURRENT_DATE
          AND cm.type_code = 'FITNESS_TYPE'
          AND cm.key2 = 'INTAKE'
          AND cm.key1 = 'CARBOHYDRATE'
          AND fr.deleted = 0
          AND cm.deleted = 0
    </select>

    <select id="getProteinIntake" resultType="int">
        SELECT COALESCE(SUM(fr.count), 0)
        FROM fitness_record fr
                 LEFT JOIN common_meta cm ON fr.type_id = cm.id
        WHERE fr.create_user = #{createUser}
          AND DATE(fr.finish_time) = CURRENT_DATE
          AND cm.type_code = 'FITNESS_TYPE'
          AND cm.key2 = 'INTAKE'
          AND cm.key1 = 'PROTEIN'
          AND fr.deleted = 0
          AND cm.deleted = 0
    </select>

    <select id="getLastWorkoutDays" resultType="int">
        SELECT DATEDIFF(CURRENT_DATE, MAX(DATE(fr.finish_time)))
        FROM fitness_record fr
                 LEFT JOIN common_meta cm ON fr.type_id = cm.id
        WHERE fr.create_user = #{createUser}
          AND cm.type_code = 'FITNESS_TYPE'
          AND cm.key2 = 'EXERCISE'
          AND fr.deleted = 0
          AND cm.deleted = 0
    </select>

    <select id="getNextWorkoutDay" resultType="string">
        SELECT DATE_FORMAT(
                       DATE_ADD(MAX(DATE (fr.finish_time)), INTERVAL 3 DAY),
                       '%Y-%m-%d'
               ) AS next_workout_day
        FROM fitness_record fr
                 JOIN common_meta cm
                      ON fr.type_id = cm.id
        WHERE fr.create_user = #{createUser}
          AND fr.deleted = 0
          AND cm.deleted = 0
          AND cm.type_code = 'FITNESS_TYPE'
          AND cm.key2 = 'EXERCISE';
    </select>

    <select id="getStreakDays" resultType="int">
        WITH RECURSIVE days AS (
            SELECT DATE(finish_time) AS date
        FROM fitness_record fr
        WHERE fr.create_user = #{createUser}
          AND fr.deleted = 0
        GROUP BY DATE(finish_time)
        ORDER BY date DESC
            ),
            streak AS (
        SELECT date, 1 AS streak, date AS start_date
        FROM days
        WHERE date = CURRENT_DATE
        UNION ALL
        SELECT d.date, s.streak + 1, s.start_date
        FROM days d
            INNER JOIN streak s ON d.date = DATE_SUB(s.date, INTERVAL 1 DAY)
            )
        SELECT IFNULL(MAX(streak), 0) AS streak_days
        FROM streak
    </select>
</mapper>
